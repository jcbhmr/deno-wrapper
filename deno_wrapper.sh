#!/bin/sh
# Deno wrapper v2.0.0
# https://github.com/jcbhmr/deno_wrapper
# MIT License
# Copyright (c) 2023 Jacob Hummer
set -e

version=2.0.0
help="
Deno wrapper v${version}
ðŸ¦• Like ./gradlew, but for Deno

curl -fsSL https://deno.land/x/deno_wrapper/deno_wrapper.sh | sh
"
[ "$1" = --help ] && echo "$help" && exit

if [ -z "$1" ]; then
  if command -v deno >/dev/null; then
    pinned=$(deno eval 'console.log(Deno.version.deno)')
  elif command -v jq >/dev/null; then
    pinned=$(curl -fsSL https://api.github.com/repos/denoland/deno/releases/latest | jq -r '.tag_name')
  else
    # Updated 2023-05-28
    pinned=1.34.0
  fi
else
  pinned=$1
fi

cat <<'EOF' | sed "s/{{version}}/$version/" | sed "s/{{pinned}}/$pinned/" > denow
#!/bin/sh
# Generated by deno_wrapper {{version}}
# https://github.com/jcbhmr/deno_wrapper
# MIT License
# Copyright (c) 2023 Jacob Hummer
set -e

# https://manpages.ubuntu.com/manpages/kinetic/en/man1/chronic.1.html
chronic() (
  set +e
  output=$($@ 2>&1)
  exit_code=$?
  set -e
  if [ "$exit_code" -ne 0 ]; then
    echo "$output" >&2
  fi
  return "$exit_code"
)

if [ ! -d .deno ]; then
    # https://github.com/denoland/deno_install#readme
    export DENO_INSTALL=.deno
    curl -fsSL https://deno.land/x/install/install.sh | chronic sh -s "v{{pinned}}"
fi

# https://github.com/denoland/deno_install/blob/master/install.sh#L53
export DENO_INSTALL=.deno
export PATH="$DENO_INSTALL/bin:$PATH"

exec deno "$@"
EOF
chmod +x denow

cat <<'EOF' | sed "s/{{version}}/$version/" | sed "s/{{pinned}}/$pinned/" > denow.bat
@echo off
: Generated by deno_wrapper {{version}}
: https://github.com/jcbhmr/deno_wrapper
: MIT License
: Copyright (c) 2023 Jacob Hummer
"%PROGRAMFILES%\Git\bin\sh.exe" denow %*
EOF
