# Deno wrapper v2.0.0
# https://github.com/jcbhmr/deno_wrapper
# MIT License
# Copyright (c) 2023 Jacob Hummer
$ErrorActionPreference = 'Stop'

$version = "2.0.0"
$help = @"
Deno wrapper v$version
ðŸ¦• Like ./gradlew, but for Deno

irm https://deno.land/x/deno_wrapper/deno_wrapper.ps1 | iex
"@
if ($args[0] -eq "--help") {
  Write-Output $help
  Exit
}

if (-not $v) {
  if (Get-Command deno -ErrorAction SilentlyContinue) {
    $pinned = deno eval 'console.log(Deno.version.deno)'
  } else {
    $pinned = (Invoke-RestMethod -Uri "https://api.github.com/repos/denoland/deno/releases/latest" | ConvertFrom-Json).tag_name
  }
} else {
  $pinned = $v
}

$denow = @'
#!/bin/sh
# Generated by deno_wrapper {{version}}
# https://github.com/jcbhmr/deno_wrapper
# MIT License
# Copyright (c) 2023 Jacob Hummer
set -e

# https://manpages.ubuntu.com/manpages/kinetic/en/man1/chronic.1.html
chronic() (
  set +e
  output=$($@ 2>&1)
  exit_code=$?
  set -e
  if [ "$exit_code" -ne 0 ]; then
    echo "$output" >&2
  fi
  return "$exit_code"
)

if [ ! -d .deno ]; then
    # https://github.com/denoland/deno_install#readme
    export DENO_INSTALL=.deno
    curl -fsSL https://deno.land/x/install/install.sh | chronic sh -s "v{{pinned}}"
fi

# https://github.com/denoland/deno_install/blob/master/install.sh#L53
export DENO_INSTALL=.deno
export PATH="$DENO_INSTALL/bin:$PATH"

exec deno "$@"
'@
$denow = $denow -replace "{{version}}", $version -replace "{{pinned}}", $pinned
$denow | Set-Content -Path "denow" -Encoding UTF8

$denow_bat = @'
@echo off
: Generated by deno_wrapper {{version}}
: https://github.com/jcbhmr/deno_wrapper
: MIT License
: Copyright (c) 2023 Jacob Hummer
: TODO: Make this use PowerShell iex instead of just Git Bash
"%PROGRAMFILES%\Git\bin\sh.exe" denow %*
'@
$denow_bat = $denow_bat -replace "{{version}}", $version -replace "{{pinned}}", $pinned
$denow_bat | Set-Content -Path "denow.bat" -Encoding UTF8
